LEC - 6 :-
ARRAYLIST :      when arraylist gets fulled it gets doubled in size.     ->     Internally creates a new array of double the size copies all the elements in it. ( Grows exponentially ) takes constant time on an AVERAGE. Internally it gets stored inside an array. But this array is private that is we cant change it directly we can change it using functions.

ArrayList<String> list = new ArrayList<>();               // where String is indicating that we can put any data type here   ->  GENERICS.
GENERICS :- 
Reuse my code for various data types 
Type safety -> so that we can add only defined data types only.
ArrayList <data_type> here data_type cannt be of primitive type. like int, float etc.
data_type : Integer
public class CustomGenArrayList<T> {

    private Object[] data;
    private static int DEFAULT_SIZE = 10;
    private int size = 0; // also working as index value

    public CustomGenArrayList() {
        data = new Object[DEFAULT_SIZE];               //new T[Default_Size]      ->     will give compile time error because of type checking at compile time, and if  while making byte code it doesnt know value of T, and creation of object at run time will not be possible.     Inoredr to avoid it we CAN either use Object or pass obj reference in parameter??.
    }

We cannt create static field having typed parameter (T). Beacuse if we create different objects having different type than the question would be what is the type of static field. Since it is static so it doesnt depend on object.
We cant use instanceof because it occurs at run time.
At compile time we dont have any info
We cannot create an instance of generic type

An enumeration is a list of named constants.
In Java, an enumeration defines a class type.
By making enumerations into classes, the capabilities of the enumeration are greatly expanded.

An enumeration is created using the enum keyword.
Enum declaration can be done outside a Class or inside a Class but not inside a Method
We can declare main() method inside enum. Hence we can invoke enum directly from the Command Prompt.

/* internally above enum Color is converted to (Check Example.java)
class Color
{
     public static final Color Red = new Color();
     public static final Color Blue = new Color();
     public static final Color Green = new Color();
}*/

Enum and Inheritance :
-All enums implicitly extend java.lang.Enum class. As a class can only extend one parent in Java,
so an enum cannot extend anything else.
-An enum cannot be a superclass.
-toString() method is overridden in java.lang.Enum class, which returns enum constant name.
-enum can implement many interfaces.

Two enumeration constants can be compared for equality by using the == relational operator.

values(), ordinal() and valueOf() methods :
These methods are present inside java.lang.Enum.
-values() method can be used to return all values present inside enum.
-Order is important in enums.By using ordinal() method, each enum constant index can be found,
just like array index.
-valueOf() method returns the enum constant of the specified string value, if exists.

enum and constructor :
-enum can contain constructor and it is executed separately for each enum constant at the time
of enum class loading.
-We can’t create enum objects explicitly and hence we can’t invoke enum constructor directly.
-And the constructor cannot be the public or protected it must have private or default modifiers.
-Why? if we create public or protected, it will allow initializing more than one objects.
-This is totally against enum concept.

enum and methods :
enum can contain concrete methods only i.e. no any abstract method.

You can compare for equality an enumeration constant with any other object by using equals( ),
which overrides the equals( ) method defined by Object.
Although equals( ) can compare an enumeration constant to any other object, those two objects
will be equal only if they both refer to the same constant,within the same enumeration.
Simply having ordinal values in common will not cause equals( ) to return true if the two constants
are from different enumerations. Remember, you can compare two enumeration references for equality by using ==.

ERROR VS EXCEPTION :-
Error -> is caused due to lack of resources Ex. statck overflow, error is non recoverable that is we cant write code to handle it
Exception -> prevents normal flow of program, divide by 0. or using null ppointer

In java there is a class that handles all exceptions - Throwable class

Throwable inherits from Object class which is further inherited by Exception and Errors class
Exceptions are of two types :
CHECKED : checked during compile time ex. if we give a file location and file doesnt occur there then this wil give FileNotFound exception
UNCHECKED : Runtime 

Runtime Exception extends Exception which is further extended by Arithematic Exception which checks at compile time.

Yes, an ArithmeticException in Java is an unchecked exception. This means it is a subclass of RuntimeException, and the compiler does not require it to be caught or declared in a method's throws clause.

public class Main {
    public static void main(String[] args) {
        int a = 5;
        int b = 0;
        try {                                            //WHILE using throws keyword and having a runtime exception we may or may not write try catch block     k
//            divide(a, b);
            // mimicing
            String name = "Kunal";
            if (name.equals("Kunal")) {
                throw new MyException("name is kunal");
            }
        } catch (MyException e) {                    //add more strict exception first
            System.out.println(e.getMessage());
        } catch (ArithmeticException e) {
            System.out.println(e.getMessage());
        } catch (Exception e) {
            System.out.println("normal exception");
        } finally {
            System.out.println("this will always execute");
        }

    }

    static int divide(int a, int b) throws ArithmeticException{
        if (b == 0) {
            throw new ArithmeticException("please do no divide by zero");            //explicitly throwing an object of exception
        }

        return  a / b;
    }
}

throw means we are throwing a new exception , whereas throws means to declare exception that is it tells the calling class that it may throw an exception

MAKING OUR OWN EXCEPTION :-

