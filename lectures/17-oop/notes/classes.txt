A class is a template for an object, and an object is an instance of a class.
A class creates a new data type that can be used to create objects.
A class is a named group of properties and functions

When you declare an object of a class, you are creating an instance of that class.
Thus, a class is a logical construct. An object has physical reality. (That is, an object occupies space in memory.)

Objects are characterized by three essential properties: state, identity, and behavior.
The state of an object is a value from its data type. 
The identity of an object distinguishes one object from another.
It is useful to think of an object’s identity as the place where its value is stored in memory.
The behavior of an object is the effect of data-type operations. Ex Creating a function

The dot operator links the name of the object (Reference variable) with the name of an instance variable(Variable inside the class Basically these are variables inside the class but otside any method, constructor, block declared inside the class).
Although commonly referred to as the dot operator, the formal specification for Java categorizes the . as a separator.
The 'new' keyword dynamically allocates(that is, allocates at run time)memory for an object & returns a reference to it.
This reference is, more or less, the address in memory of the object allocated by new.
This reference is then stored in the variable.
Thus, in Java, all class objects must be dynamically allocated.

Box mybox; // declare reference to object (it is just a declaration by default it will be holding default value that is NULL or we can say pointing to null just because it was a reference var)
     mybox = new Box(); // allocate a Box object
     left part of above statement is executed at compile time and right part of it is executed at runtime that is when our program is running
mybox is not an object it is just hoding reference of that object which is stored in heap
The first line declares mybox as a reference to an object of type Box. At this point, mybox does not yet refer to an
actual object. The next line allocates an object and assigns a reference to it to mybox. After the second line executes,
you can use mybox as if it were a Box object. But in reality, mybox simply holds, in essence, the memory address of the
actual Box object.
The key to Java’s safety is that you cannot manipulate references as you can actual pointers.(that is we cannot get memory address)
Thus, you cannot cause an object reference to point to an arbitrary memory location (that is holding something differrent data) or manipulate it like an integer.

JAVA IS A STATICALLY TYPES LANGUAGE -> beacuse of this we cant get access of those variables not declared in template that is class , but this can be done in python

A Closer Look at new:
classname class-var = new classname ( );
Here, class-var is a variable of the class type being created. The classname is the name of the class that is being
instantiated. The class name followed by parentheses specifies the constructor for the class. A constructor defines
what occurs when an object of a class is created. Constructor helps us in defining values of propertines during crreation of an object
Constructor is a special type of function that runs whenever we create an object...


You might be wondering why you do not need to use new for such things as integers or characters.
The answer is that Java’s primitive types are not implemented as objects.
Rather, they are implemented as “normal” variables.
they are stored in stack memory
but in python everything is stored as object even primitives are stored in heap
This is done in the interest of efficiency (for speed).

It is important to understand that new allocates memory for an object during run time.

Box b1 = new Box();
Box b2 = b1;
b1 and b2 will both refer to the same object. The assignment of b1 to b2 did not allocate any memory or copy any part
of the original object. It simply makes b2 refer to the same object as does b1. Thus, any changes made to the object
through b2 will affect the object to which b1 is referring, since they are the same object.
When you assign one object reference variable to another object reference variable, you are not creating a copy of the
object, you are only making a copy of the reference.

int square(int i){
    return i * i;
}
A parameter is a variable defined by a method that receives a value when the method is called. For example,
in square( int i), i is a parameter. An argument is a value that is passed to a method when it is invoked.
For example, square(100) passes 100 as an argument. Inside square( ), the parameter i receives that value.

NOTE:
Bus bus = new Bus();
lhs(reference i.e. bus) is looked by compiler & rhs (object i.e. new Bus()) is looked by jvm-> done at runtime (Memory allocation)

CONSTRUCTOR CHAINING:-
calling another constructor inside another constructor.
ex...
     Student(){
          this(13, "hello");          //calling another constructor inside another
//internally this is same is new Student(13, "hello");
     }

     Student(int num, String name){
          this.num = num;
          this.name = name;
     }


//Wrapper class :- 
int a = 10;           //primitive
Integer num = 45 OR new Integer(45);               //in heap memory -> object

in java we have only pass by value and there is nothing like pass by reference
now inorder to swap var using another swap function we will not be able to do this using prmitives but using object we CANNOT do this that is using second declaration becuase Integer class is final

final is a keyword using whhich we can make our content immutable or const 
convention says final keyword if used with a variable then write in capital letters
final int bonus = 2;
bonus = 3 // error...
it is mandatory to initialize final INSTANCE VARIABLE either during declaration or inside a block or within a constructor

FOR PRIMITIVES:-
using final with primitive variables -> we cant change their value OR const

FOR REFERENCE :-
using final means we cant change the link to which our reference variable is pointing but we are capable to change value of the person to which out ref variable is pointing...
final Student s = new Student (42);
s.num = 30;          ---->>>>       ALLOWED

In java you have a control to specify what to do when a particular object is destroyed but we dont have a control when to destroy an object that is we cant manuallly specify when to destroy it but we can  specify what to do when this object is destroyed
this is done using finaliser which is declared inside finalise method just same as destructer in cpp

+++++++++++++++++++++++++++++++++++++++++WRITE INSIDE A CLASS+++++++++++++++++++++++++++++++++++
@override
protected void finalize() throws  Throwable{
     //something
}

EX.
        A obj = new A("Rnadvsjhv");

        System.out.println(obj);

//        for (int i = 0; i < 1000000000; i++) {
//            obj = new A("Random name");               //every time a new reference is being alloted to this reference variable...
//        }
